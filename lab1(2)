// ConsoleApplication11.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>

using namespace std;

class Production {
private:
	string name;
	int number;
	int corpNumber;
public:
	Production();
	string getName() { return name; };// get -считать из экземпляра
	void setName(string data) { name = data; };
	int getNumber() { return number; };
	void setNumber(int data) { number = data; };
	int getCorpNumber() { return corpNumber; };
	void setCorpNumber(int data) { corpNumber = data; };
	friend ostream& operator<< (ostream &out, const Production item);
	friend istream& operator>> (istream &in,  Production& item);
	friend bool operator< (const Production &prod1, const Production &prod2);
	//перегрузка оператора сравнения
};

bool operator<(const Production & prod1, const Production & prod2)
{
		return prod1.name > prod2.name;

};
Production::Production()
{
	cout << "_____________________________________" << endl;

}
template<typename T>
class list
{
private:

	template<typename T>
	class Node
	{
	public:
		Node *pNext;
		T data;
		Node(T data = T(), Node *pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int size;
	Node<T> *head;
public:
	list();
	~list();
	void pop_front();
	void clear();
	void showForCorp(int number);
	void push_back(T data);
	int getSize() { return size; }
	T& operator[](const int index);
	void ShellSort();

};
template<typename T>
list<T>::list()
{
	size = 0;
	head = nullptr;
}

template<typename T>
list<T>::~list()
{
}

template<typename T>
void list<T>::pop_front()
{
	Node<T> *temp = head;
	head = head->pNext;
	delete temp;
	size--;
}

template<typename T>
void list<T>::clear()
{
	while (size)
	{
		pop_front();

	}
}

template<typename T>
void list<T>::showForCorp(int number)
{

	vector<T> vec;
	list<T> lst = *this;
	for (int i = 0; i < size; i++)
		if (lst[i].getCorpNumber() == number)
			vec.push_back(lst[i]);
	std::sort(vec.begin(), vec.end(), [](const T &elem1, const T &elem2)
	{
		return elem1 > elem2;
	});
	for (auto elemet : vec)
	{
		cout << elemet << endl;
	}

}

template<typename T>
void list<T>::ShellSort()
{
	list<T> lst = *this;
	int d = size / 2;                        //Длина промежутков между элементами
	while (d > 0)
	{
		for (int i = 0; i < size - d; i++)
		{
			int j = i;
			while (j >= 0 && lst[j] < lst[j + d])
			{
				T temp = lst[j];
				lst[j] = lst[j + d];
				lst[j + d] = temp;
				j--;
			}
		}
		d = d / 2;
	}
}


template<typename T>
void list<T>::push_back(T data)
{
	if (head == nullptr)
		head = new Node<T>(data);
	else
	{
		Node<T> *current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);
	}
	size++;
}
template<typename T>
T& list<T>::operator[](const int index)
{
	int counter = 0;
	Node<T> *current = this->head;
	while (current != nullptr)
	{
		if (counter == index)
		{
			return current->data;
		}
		current = current->pNext;
		counter++;
	}
}







	int main()
	{
		try
		{
			setlocale(LC_ALL, "ru");
			cout << "Введите количчество элементов" << endl;
			int n;
			cin >> n;
			list<Production> lst;
	
			for (int i = 0; i < n; i++)
			{
				Production a;

				cin >> a;
				
				lst.push_back(a);
			}
			if (&lst == nullptr)
				throw exception("Попытка просмотра пустого множества");
			cout << "До сортировки" << endl;
			for (int i = 0; i < lst.getSize(); i++)
			{
				cout << lst[i] << endl;
			}
			lst.ShellSort();
			cout << "После сортровки" << endl;
			for (int i = 0; i < lst.getSize(); i++)
				cout << lst[i] << "\n";
			cout << "Удаление элемента из начала" << endl;
			lst.pop_front();
			cout << "После удаления" << endl;
			for (int i = 0; i < lst.getSize(); i++)
				cout << lst[i] << "\n";
		}
		catch (exception &ex)
		{
			cout << ex.what();
		}
	}

	ostream & operator<<(ostream & out, const Production item)
	{
		out.unsetf(ios::dec);
		out.setf( ios::hex | ios::showbase |ios::uppercase | ios::showpos);
		cout.setf(ios::dec);
		out << "Имя изделия: " << item.name << " | " << "Количество изделий: " << item.number << " | "
			<< "Номер цеха сборки: " << "№" << item.corpNumber << " | \n";
		return out;
	}

	 istream& operator>> (istream &in,  Production& item)
	{
		 in.setf(ios::showbase);
		 cout<<"Введите через пробел наименование изделия, количество изделий, цех сборки"<<endl;
	
		 in >> item.name >> item.number >> item.corpNumber;
		 return in;
	}

